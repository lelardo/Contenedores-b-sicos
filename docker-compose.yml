version: '3.9'

services:
  db:
    image: postgres:15
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  loggin-service:
    build:
      context: ./loggin-service
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        sleep 10 &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./loggin-service:/app
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  session-service:
    build:
      context: ./session-service
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        sleep 12 &&
        npm start
      "
    volumes:
      - ./session-service:/app
      - /app/node_modules
    ports:
      - "3003:3003"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  posts-service:
    build:
      context: ./posts-service
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        sleep 15 &&
        npm start
      "
    volumes:
      - ./posts-service:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  comments-service:
    build:
      context: ./comments-service
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        sleep 20 &&
        python app.py
      "
    volumes:
      - ./comments-service:/app
    ports:
      - "3002:3002"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  messages-service:
    build:
      context: ./messages-service
      dockerfile: Dockerfile
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        sleep 18 &&
        npm start
      "
    volumes:
      - ./messages-service:/app
      - /app/node_modules
    ports:
      - "3004:3004"
    env_file: .env
    environment:
      - USER_SERVICE_URL=http://session-service:3003
    depends_on:
      db:
        condition: service_healthy
      session-service:
        condition: service_started
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: >
      sh -c "
        npm run build &&
        npm run preview -- --host 0.0.0.0
      "
    ports:
      - "4321:4321"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - loggin-service
      - session-service
      - posts-service
      - comments-service
      - messages-service
    restart: on-failure

volumes:
  postgres_data: