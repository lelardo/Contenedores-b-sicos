---
// Frontmatter de Astro (aquí puedes importar CSS y JS)
import './index.css';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Dino feisbuc</title>
		
	</head>
	<body>
		<div class="container">
			<h1>Dino feisbuc</h1>
			
			<div id="user-info"></div>
			
			<div id="nav-buttons" class="nav-buttons">
				<!-- Navigation buttons will be loaded dynamically -->
			</div>
			
			<div class="publicaciones">
				<h2>Publicaciones Recientes</h2>
				<div id="publicaciones-container">
					<div class="loading">Cargando publicaciones...</div>
				</div>
			</div>
		</div>

		<script client:load>
			// Configuración de servicios - detectar si estamos en producción
			const isProduction = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1';
			const VM_IP = window.location.hostname; // Usar la IP de la VM desde el navegador
			
			const USER_SERVICE = isProduction ? 
				`http://${VM_IP}:3003` : 
				'http://localhost:3003';
			const POSTS_SERVICE = isProduction ? 
				`http://${VM_IP}:3001` : 
				'http://localhost:3001';
			const COMMENTS_SERVICE = isProduction ? 
				`http://${VM_IP}:3002` : 
				'http://localhost:3002';
			let currentUser = null;

			async function checkAuthStatus() {
				try {
					const response = await fetch(`${USER_SERVICE}/profile`, {
						credentials: 'include'
					});

					if (response.ok) {
						const data = await response.json();
						currentUser = data.user;
						showAuthenticatedNav();
					} else {
						currentUser = null;
						showUnauthenticatedNav();
					}
				} catch (error) {
					console.log('User not authenticated');
					currentUser = null;
					showUnauthenticatedNav();
				}
			}

			function showAuthenticatedNav() {
				const userInfo = document.getElementById('user-info');
				const navButtons = document.getElementById('nav-buttons');

				userInfo.innerHTML = `
					<div class="user-welcome">
						¡Bienvenido, ${currentUser.first_name} ${currentUser.last_name}!
					</div>
				`;

				navButtons.innerHTML = `
					<a href="/perfil" class="btn">Mi Perfil</a>
					<a href="/mensajes" class="btn">Mensajes</a>
					<button onclick="handleLogout()" class="btn logout">Cerrar Sesión</button>
				`;
			}

			function showUnauthenticatedNav() {
				const userInfo = document.getElementById('user-info');
				const navButtons = document.getElementById('nav-buttons');

				userInfo.innerHTML = '';

				navButtons.innerHTML = `
					<a href="/login" class="btn">Iniciar Sesión</a>
					<a href="/registro" class="btn">Registrarse</a>
				`;
			}

			// Make logout function globally accessible
			window.handleLogout = async function() {
				try {
					const response = await fetch(`${USER_SERVICE}/logout`, {
						method: 'POST',
						credentials: 'include'
					});

					// Always redirect to login regardless of server response
					window.location.href = '/login';
				} catch (error) {
					console.error('Logout error:', error);
					// Still redirect to login in case of network error
					window.location.href = '/login';
				}
			}

			async function loadComments(postId) {
				try {
					const response = await fetch(`${COMMENTS_SERVICE}/posts/${postId}/comments`);
					const data = await response.json();
					return data.comments || [];
				} catch (error) {
					console.error('Error loading comments:', error);
					return [];
				}
			}

			async function addComment(postId, content) {
				if (!currentUser) {
					alert('Debes iniciar sesión para comentar');
					return null;
				}

				console.log('=== DEBUG COMMENT ===');
				console.log('Post ID:', postId);
				console.log('Content:', content);
				console.log('Current User:', currentUser);
				console.log('Comments Service URL:', COMMENTS_SERVICE);

				try {
					const requestData = {
						user_id: currentUser.id,
						username: currentUser.username,
						content: content
					};
					
					console.log('Request data:', requestData);
					console.log('Full URL:', `${COMMENTS_SERVICE}/posts/${postId}/comments`);

					const response = await fetch(`${COMMENTS_SERVICE}/posts/${postId}/comments`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify(requestData)
					});

					console.log('Response status:', response.status);
					console.log('Response headers:', response.headers);

					if (!response.ok) {
						console.error('Response not OK:', response.status, response.statusText);
						const errorText = await response.text();
						console.error('Error response body:', errorText);
						return null;
					}

					const result = await response.json();
					console.log('Response result:', result);
					
					if (result.success) {
						console.log('Comment added successfully!');
						return result.comment;
					} else {
						console.error('Server returned success=false:', result);
						return null;
					}
				} catch (error) {
					console.error('Fetch error:', error);
					return null;
				}
			}

			async function loadPublicaciones() {
				try {
					const response = await fetch(`${POSTS_SERVICE}/posts`);
					const data = await response.json();
					
					const container = document.getElementById('publicaciones-container');
					
					if (data.posts && data.posts.length > 0) {
						const postsHtml = await Promise.all(data.posts.map(async (post) => {
							const comments = await loadComments(post.id);
							
							return `
								<div class="publicacion">
									<div class="publicacion-header">
										<div class="usuario-info">
											${post.user_id 
												? `<img src="${USER_SERVICE}/profile-picture/${post.user_id}" alt="Foto de perfil" class="avatar" onerror="this.src='/default-profile.png'">`
												: `<img src="/default-profile.png" alt="Foto de perfil predeterminada" class="avatar">`
											}
											<span class="username">${post.username}</span>
										</div>
										<span class="fecha">${new Date(post.created_at).toLocaleString()}</span>
									</div>
									<h3>${post.title}</h3>
									<div class="contenido">${post.content}</div>
									${post.has_image 
										? `<div class="imagen"><img src="${POSTS_SERVICE}/posts/${post.id}/image" alt="Imagen de la publicación"></div>`
										: ''
									}
									
									<div class="comments-section">
										<h4>Comentarios (${comments.length})</h4>
										<div class="comments-list" id="comments-${post.id}">
											${comments.map(comment => `
												<div class="comment">
													<strong>${comment.username}:</strong>
													<span>${comment.content}</span>
													<small class="comment-date">${new Date(comment.created_at).toLocaleString()}</small>
												</div>
											`).join('')}
										</div>
										
										${currentUser ? `
											<div class="add-comment">
												<textarea id="comment-input-${post.id}" placeholder="Escribe un comentario..." rows="2"></textarea>
												<button onclick="submitComment(${post.id})" class="btn-comment">Comentar</button>
											</div>
										` : '<p class="login-prompt">Inicia sesión para comentar</p>'}
									</div>
								</div>
							`;
						}));
						
						container.innerHTML = postsHtml.join('');
					} else {
						container.innerHTML = '<p>No hay publicaciones disponibles.</p>';
					}
				} catch (error) {
					console.error('Error loading publicaciones:', error);
					document.getElementById('publicaciones-container').innerHTML = 
						'<div class="error">Error al cargar las publicaciones</div>';
				}
			}

			// Make submit comment function globally accessible
			window.submitComment = async function(postId) {
				const input = document.getElementById(`comment-input-${postId}`);
				const content = input.value.trim();
				
				if (!content) {
					alert('El comentario no puede estar vacío');
					return;
				}

				const comment = await addComment(postId, content);
				if (comment) {
					// Add the new comment to the UI
					const commentsList = document.getElementById(`comments-${postId}`);
					const newCommentHtml = `
						<div class="comment">
							<strong>${comment.username || currentUser.username}:</strong>
							<span>${comment.content}</span>
							<small class="comment-date">${new Date(comment.created_at).toLocaleString()}</small>
						</div>
					`;
					commentsList.insertAdjacentHTML('beforeend', newCommentHtml);
					input.value = '';
					
					// Update comment count
					const section = input.closest('.publicacion').querySelector('.comments-section h4');
					const currentCount = parseInt(section.textContent.match(/\d+/)[0]);
					section.textContent = `Comentarios (${currentCount + 1})`;
				} else {
					alert('Error al agregar el comentario');
				}
			}

			// Initialize page when loaded
			document.addEventListener('DOMContentLoaded', async () => {
				await checkAuthStatus();
				await loadPublicaciones();
			});
		</script>
	</body>
</html>
